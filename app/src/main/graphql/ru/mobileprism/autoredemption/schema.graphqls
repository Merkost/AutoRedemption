type SubscriptionStatus {
  isActive: Boolean!

  subscriptionEnds: String!
}

type Timezone {
  _id: String!

  label: String!

  name: String!

  utc: String!

  msk: String!
}

type City {
  _id: String!

  name: String!

  timezone: String!
}

type User {
  _id: ID!

  phone: String!

  createdAt: String!

  subscriptionStatus: SubscriptionStatus!

  role: String!

  city: City

  timezone: Timezone

  monthlyPayment: Int

  name: String

  comment: String
}

type VerifyPhoneResponse {
  success: Boolean!

  message: String!
}

type AuthResponse {
  token: String!

  user: User!
}

type Config {
  _id: ID!

  confirmSmsAttempts: Int!

  confirmSmsExpiration: Int!

  verifyPhoneAttempts: Int!

  verifyPhoneExpiration: Int!

  jwtExpiration: Int!
}

input UpdateUserInput {
  phone: String

  isActive: Boolean

  subscriptionEnds: String

  role: String

  cityId: String

  timezoneId: String

  monthlyPayment: Int

  name: String

  comment: String
}

input UpdateConfigInput {
  confirmSmsAttempts: Int

  confirmSmsExpiration: Int

  verifyPhoneAttempts: Int

  verifyPhoneExpiration: Int

  jwtExpiration: Int
}

type Query {
  getUser(_id: ID!): User

  getUsers: [User]

  getCities: [City]

  getTimezones: [Timezone]
}

type Mutation {
  verifyPhone(phone: String!): VerifyPhoneResponse

  confirmSms(phone: String!, code: String!): AuthResponse

  deleteUser(_id: ID!): String

  updateUser(_id: ID!, input: UpdateUserInput): User

  updateConfig(input: UpdateConfigInput): Config
}

schema {
  query: Query
  mutation: Mutation
}

type SubscriptionStatus {
  isActive: Boolean!

  subscriptionEnds: String!
}

type User {
  _id: ID!

  phone: String!

  createdAt: String!

  subscriptionStatus: SubscriptionStatus!

  firstname: String

  lastname: String
}

type Admin {
  _id: ID!

  phone: String!

  createdAt: String!

  readOnly: Boolean!

  firstname: String

  lastname: String
}

type VerifyPhoneResponse {
  success: Boolean!

  message: String!
}

type AuthResponse {
  token: String!

  user: User!
}

type AdminAuthResponse {
  token: String!

  admin: Admin!
}

type Query {
  getUsers: [User]

  getUser(_id: ID!): User
}

type Mutation {
  verifyAdminPhone(phone: String!): VerifyPhoneResponse

  confirmAdminSms(phone: String!, code: String!): AdminAuthResponse

  verifyPhone(phone: String!): VerifyPhoneResponse

  confirmSms(phone: String!, code: String!): AuthResponse

  updateUser(phone: String, firstname: String, lastname: String): User

  deleteUser(_id: ID!): String
}

schema {
  query: Query
  mutation: Mutation
}

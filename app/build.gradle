plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id("com.apollographql.apollo3").version("3.6.0")
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "ru.mobileprism.autoredemption"
        minSdk 25
        targetSdk 33
        versionCode 5
        versionName "0.0.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'com.github.FunkyMuse:Crashy:1.2.0'

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    implementation "com.google.accompanist:accompanist-permissions:0.24.1-alpha"

    implementation("com.googlecode.libphonenumber:libphonenumber:7.0.4")

    def work_version = "2.7.1"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"

    // Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation 'androidx.preference:preference-ktx:1.2.0' //support fo SharedPrefs
    //implementation "androidx.datastore:datastore-preferences-core:1.0.0"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0'
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.6"

    //Navigation
    implementation "androidx.navigation:navigation-compose:2.5.2"

    implementation 'com.google.dagger:hilt-android:2.43.2'
    kapt 'com.google.dagger:hilt-compiler:2.43.2'


    //APOLLO GRAPHQL
    implementation("com.apollographql.apollo3:apollo-runtime:3.6.0")

    // optional: if you want to use the normalized cache
    implementation("com.apollographql.apollo3:apollo-normalized-cache-sqlite:3.6.0")
    // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime
    // and use apollo-api instead
    //implementation("com.apollographql.apollo3:apollo-api:3.6.0")

    //KOIN DEPENDENCY INJECTION

    // Current version
    def koin_version = '3.1.4'
    // Koin Core features
    api "io.insert-koin:koin-core:$koin_version"
    // Koin main features for Android
    api "io.insert-koin:koin-android:$koin_version"
    // Java Compatibility
    api "io.insert-koin:koin-android-compat:$koin_version"
    // Jetpack WorkManager
    api "io.insert-koin:koin-androidx-workmanager:$koin_version"
    // Navigation Graph
    api "io.insert-koin:koin-androidx-navigation:$koin_version"
    // Jetpack Compose
    api "io.insert-koin:koin-androidx-compose:$koin_version"
}

apollo {
    packageName.set("ru.mobileprism.autoredemption")
}
